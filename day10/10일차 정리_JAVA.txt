★ 클래스 활용 복습
- 클래스는 자료형이고, 객체는 클래스에 의해 만들어진 데이터이다.
- 하나의 클래스로 여러개의 서로 다른 객체를 생성할 수 있다.
- 생성자 : 지정한 클래스의 객체를 생성하는 특수한 함수
    -> 생성자는 함수이므로 오버로딩이 가능하다.
    -> 생성자를 작성하지 않으면, 컴파일 시 기본 생성자를 자동으로 만들어준다.
    -> 이때, 기본 생성자란 매개변수를 전달받지 않는 생성자를 말한다.
    -> 클래스의 이름과 동일하다.
    -> 별도의 반환형을 가지지 않는다. (void도 쓰지 않는다)
    -> 생성자 내부에서 또다른 생성자를 호출할 때 this 키워드를 사용한다.
    -> 항상 생성자 코더의 첫줄에서만 가능!
    -> 객체의 생성 (생성이 완료되지 않으면, 추가작업을 진행할 수 없다)
    -> 객체의 생성 이후 초기값 할당 및 추가 작업 진행
- 생성자 오버로딩 : 객체 생성에 여러가지 방식을 제공한다.
    -> 원을 만드는 과정에서 반지름을 전달받지 않으면, 기본값으로 3을 적용하여 둘레와 면적을 계산한다.
    -> 원을 만드는 과정에서 반지름을 정수로 전달받으면, 생성자에서 둘레와 면적을 계산한다.
    -> 원을 만드는 과정에서 반지름을 실수로 전달받으면, 생성자에서 둘레와 면적을 계산한다.
- static : 정적 멤버 요소를 만들 때 사용한다.
    -> 특정 객체를 지목하지 않아도, 자료형에 각인되어 있는 속성이나 기능을 만들 수 있다.(ex - static int count)
    -> 객체를 생성하지 않아도, 클래스로 접글이 가능하다. (ex - Human.count)
    -> 같은 클래스를 사용하는 모든 객체가 공유할 수 있다.
    -> 첫번째 객체에서 count 값을 증가시키면 두번째 객체에서 count 값을 호출 시 증가되어 있다.
    -> Human 클래스의 count 필드는 정적필드이므로, 정적인 방법으로 접근해야 한다.
    -> 즉, 객체, 필드 방식이 아니라, 클래스.필드로 접근하는 것이 올바른 방법이다.
- 간단한 게임을 만들수 있다.
    -> 12개의 숫자들 중 컴퓨터와 내가 임의의 숫자를 뽑도록하여 큰 수를 뽑는 사람이 승리하는 게임
    -> 트럼프 카드 만들기 (객체 선언 시 원하는 문양과 숫자를 생성자 매개변수로 전달하면 트럼프 카드 형태로 만들어준다)


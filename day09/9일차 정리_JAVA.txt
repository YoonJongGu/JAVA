★ OOP(Object Oriented Programming)
- 프로그램 내의 모든 사물, 개념, 요소를 객체(object)로 규정한다.
- 객체와 객체의 상호작용에 의해 프로그램이 진행되는 방식으로 작성한다.
    1) 내 프로그램의 주제가 무엇인가?
    2) 프로그램이 다루어야 할 데이터의 자료형은 어떤 것들이 있는가?
        -> 기본 데이터 자료형을 정의하기 위한 클래스 (속성 중심의 클래스) : VO, DTO
    3) 프로그램이 갖추어야 할 기능에는 어떤 것들이 있는가?
        -> 프로그램이 가져야 할 기능을 모아둔 클래스 (기능 중심의 클래스) : DAO

★ Chicken(클래스 활용)
- 배달 앱에서 주문 가능한 치킨 메뉴의 목록을 하나의 객체로 구성해보기
- 매장이 가져야 할 속성을 정의한다. (브랜드, 매장(지점), 메뉴이름, 가격, 별점) : Chicken
    -> 속성이 정리되면, 클래스의 멤버 필드로 구성하기
    -> 여러 객체를 생각하면서 구성하지 않는다.
    -> 단일 객체를 기반으로 생각하면서 구성한다.
    -> 클래스의 멤버 필드는 초기값을 지정하지 않아도, 0에 맞는 값으로 초기화된다.
    -> 객체를 생성할 때, 필요한 초기 작업(필드 초기화)을 수행할 생성자를 작성한다.
    -> 정의된 생성자를 통하지 않고서는, 객체를 생성할 수 없다! (중요 포인트)
    -> 생성자에서 사용되는 this는 생성된 객체 자기자신을 가리키는 0번째 매개변수이다.
    -> 속성이 정리되면 관련된 함수를 메서드로 작성한다.
- 데이터를 제어하고, 기능을 포함하는 클래스 : Handler
    -> 데이터 저장을 위한 배열을 선언한다.
    -> Chicken 타입의 객체를 전달받아서 배열의 빈 칸에 저장하는 기능(메서드) : insert
    -> arr 배열의 데이터 중 빈킨이 아닌것만 화면에 출력하는 기능(메서드) : show
- 사용자와 상호작용을 담당한다 : Main
    -> Handler 클래스를 main 함수 지역변수에서 Main 클래스의 멤버필드로 변경
    -> 사용자와 입출력으로 상호작용하면서 프로그램을 진행한다.
    -> 그 과정에 필요한 입력 데이터를 활용해 객체로 반환하는 함수를 만들어준다 : input


★ Book(클래스 활용)
- 책이 가져야 할 속성을 정의한다. (제목, 저자, 출판사, 가격, 별점1, 별점2) : BookDTO
    -> 각각 필요한 요소에 대한 자료형 설정을 해준다.
    -> 객체 내부에 저장된 내용 확인을 위한 함수를 정의해준다.
- 프로그램이 가지는 기능들을 정의한다 (추가, 삭제, 목록, 검색, 정렬) : BookDAO
    -> 내부에 배열을 선언하여 데이터 저장을 위한 공간을 만들어 준다.
    -> 필요시에는 생성자를 이용하여 더미 데이터를 미리 넣어 테스트 목적으로 사용이 가능하다.
    -> 각 기능에 맞게 비즈니스로직을 구현하여 완성해준다.
- 사용자와 상호작용을 담당한다 : Main
    -> 더미 데이터 활용을 통해 출력이 정상적으로 진행되는지 테스트한다.
    -> 사용자 입력을 통해 원하는 데이터 활용이 가능한지 테스트한다.
★ Array(배열) 활용
    1) 길이가 자동으로 늘어나는 배열을 만들어보기
	- 임의의 배열을 생성한다(길이는 임의의 고정값을 준다)
	- 배열에 값이 0인 경우 사용자 입력값을 저장한다.
	- 배열에 공간이 부족한경우 현재 배열의 길이보다 긴 배열을 임시로 만들고 기존 배열의 값들을 저장해준다.
	- 기존 배열이 임시로 만든 배열을 참조하도록 설정해준다. 
	- 해당 과정을 반복하는 경우 배열의 길이가 자동으로 늘어나는 배열이 만들어진다.

    2) ArrayList의 원리 알아보기
	- 아래에서 만든 StringList 클래스를 이용하여 객체를 선언하고 add 함수를 이용하여 값을 저장한다.
	- 똑같이 ArrayList 객체를 선언하고 내장 함수 add를 통해 값을 저장한다.
	- 출력 시 StringList가 toString을 오버라이딩하여 ArrayList 출력 결과와 같은 형태로 출력이 된다.
	   (print 출력 함수는 toString 함수를 참조하여 출력 결과를 만들기 때문이다.)

    3) 이차원배열 활용하기
	- 이차원 배열의 형태는 배열안에 배열을 가지고 있는 형태이다.(배열의 한 요소가 배열이다)
	- arr = new int[5][5] : 배열이기에 마찬가지로 고정된 길이를 가지며 5 * 5 형태의 행열과 같다.
	- 값의 확인을 위해 이중 반복문을 사용하는 경우가 있다.
	- 반복문과 조건문을 이용하여 다양한 형태의 이차원 배열 형태를 만들수 있다.(핵심은 규칙을 파악하는 것이다)

★ StringList Class 선언
- 클래스 내부의 함수들이 공통적으로 참조할 수 있는 변수, 함수의 지역변수와 구분하기 위해서, 멤버 필드라고 부른다
- 이클립스 내부에서는 멤버필드를 파란색, 지역변수는 갈색으로 구분한다.
- 문자열 배열 형태의 멤버필드를 선언한다.(기본 길이는 0으로 고정값을 준다)
- 이후 외부에서 add 메서드를 호출할 경우 멤버 필드 배열길이보다 하나 더 긴 배열을 임시로 선언하고,
- 인자값으로 들어온 매개변수를 해당 배열에 저장하고 멤버 필드 배열이 임시 배열을 참조하도록 대입해 준다.
- 문자열의 toString() 메서드를 오버라이딩하여 배열 값들을 [ , , , , ... ]와 같은 형태로 보여주도록 만들어준다. 

★ 오버로딩과 오버라이딩
- 오버로딩 : 현재 클래스 안에 같은 이름의 함수가 2개 이상 있다.
- 오버라이딩 : 슈퍼클래스에게 [상속]받아서 이미 있는데, 같은 형식으로 새로 쓰면 덮어쓴다.
